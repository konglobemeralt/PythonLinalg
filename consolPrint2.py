Python 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> WARNING: The version of Tcl/Tk (8.5.9) in use may be unstable.
Visit http://www.python.org/download/mac/tcltk/ for current information.
s = {2, 3, "sdf"}
>>> "sdf" in s
True
>>> t = {2, 37, "cara"}
>>> u = s | t
>>> u
{2, 3, 37, 'sdf', 'cara'}
>>> u = s & t
>>> u
{2}
>>> | union of set
SyntaxError: invalid syntax
>>> & intersection of set
SyntaxError: invalid syntax
>>> s.add{22}
SyntaxError: invalid syntax
>>> s.add(22)
>>> s
{'sdf', 2, 3, 22}
>>> s.add(34, 34)
Traceback (most recent call last):
  File "<pyshell#12>", line 1, in <module>
    s.add(34, 34)
TypeError: add() takes exactly one argument (2 given)
>>> s.add({2, 3})
Traceback (most recent call last):
  File "<pyshell#13>", line 1, in <module>
    s.add({2, 3})
TypeError: unhashable type: 'set'
>>> s.add(t)
Traceback (most recent call last):
  File "<pyshell#14>", line 1, in <module>
    s.add(t)
TypeError: unhashable type: 'set'
>>> s.update(t)
>>> s
{2, 3, 37, 22, 'sdf', 'cara'}
>>> s.remove(t)
Traceback (most recent call last):
  File "<pyshell#17>", line 1, in <module>
    s.remove(t)
KeyError: {2, 'cara', 37}
>>> {2 * x for x in {2, 3, 4}}
{8, 4, 6}
>>> {x for x < 10}
SyntaxError: invalid syntax
>>> {x^2 for x in {1, 2, 3, 4, 5}}
{0, 1, 3, 6, 7}
>>> 1^2
3
>>> {x**2 for x in {1, 2, 3, 4, 5}}
{1, 4, 9, 16, 25}
>>> {2**x for x in {1, 2, 3, 4, 5}}
{32, 2, 4, 8, 16}
>>> 2**1
2
>>> {2**x for x in {0, 1, 2, 3, 4}}
{1, 2, 4, 8, 16}
>>> {x*x for x in s | {2, 3}}
Traceback (most recent call last):
  File "<pyshell#26>", line 1, in <module>
    {x*x for x in s | {2, 3}}
  File "<pyshell#26>", line 1, in <setcomp>
    {x*x for x in s | {2, 3}}
TypeError: can't multiply sequence by non-int of type 'str'
>>> t
{2, 'cara', 37}
>>> s = {1, 2, 3}
>>> {x*x for x in s | {4, 5}}
{1, 4, 9, 16, 25}
>>> {x*x for x in s & {4, 5}}
set()
>>> {x*x for x om s & {1, 2, 3, 4}}
SyntaxError: invalid syntax
>>> {x*x for x in s & {1, 2, 3, 4}}
{1, 4, 9}
>>> {x*x for x in {1, 2, 4} if x == 4}
{16}
>>> {x**y for x in {1, 2, 3, 4, 5} for y in {3, 4, 5, 6}}
{32, 1, 64, 256, 1024, 4096, 8, 15625, 16, 81, 625, 243, 3125, 729, 27, 125}
>>> {x*y for x in {1, 2, 3} for y in {2, 3, 4}}
{2, 3, 4, 6, 8, 9, 12}
>>> {x*y for x in {1, 2, 3} for y in {5, 6, 7}}
{5, 6, 7, 10, 12, 14, 15, 18, 21}
>>> 
>>> {x*y for x in {1, 2, 3} for y in {4, 5, 6} if x != y }
{4, 5, 6, 8, 10, 12, 15, 18}
>>> {x*y for x in {1, 2, 3} for y in {5, 6, 0} if x != y }
{0, 5, 6, 10, 12, 15, 18}
>>> {x*y for x in {1, 2, 1} for y in {2, 3, 4} if x != y }
{2, 3, 4, 6, 8}
>>> {x*y for x in {1, 2, 0.1} for y in {5, 6, 10} if x != y }
{0.5, 1.0, 0.6000000000000001, 5, 6, 10, 12, 20}
>>> S = {1 ,2 ,3, 4}
>>> T = {3, 4, 5, 6}
>>> {x for x in S if x in T}
{3, 4}
>>> lista = [20, 10, 15, 75]
>>> sum(lista)/len(lista)
30.0
>>> andraListan = ["Hej", "World"]
>>> lista = andraListan
>>> lista = [1, 2, 4]
>>> andraListan + listan
Traceback (most recent call last):
  File "<pyshell#50>", line 1, in <module>
    andraListan + listan
NameError: name 'listan' is not defined
>>> lista + andraListan
[1, 2, 4, 'Hej', 'World']
>>> [2*x for x in {1, 2, 3, 4, 5}]
[2, 4, 6, 8, 10]
>>> [2*x for x in [1, 2, 3, 4, 5, 6]]
[2, 4, 6, 8, 10, 12]
>>> letters = ['A', 'B', 'C']
>>> numbers = [1, 2, 3]
>>> [x + y for x in numbers for y in letters ]
Traceback (most recent call last):
  File "<pyshell#56>", line 1, in <module>
    [x + y for x in numbers for y in letters ]
  File "<pyshell#56>", line 1, in <listcomp>
    [x + y for x in numbers for y in letters ]
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> [x *y for x in numbers for y in letters ]
['A', 'B', 'C', 'AA', 'BB', 'CC', 'AAA', 'BBB', 'CCC']
>>> [x.toString + y for x in numbers for y in letters ]
Traceback (most recent call last):
  File "<pyshell#58>", line 1, in <module>
    [x.toString + y for x in numbers for y in letters ]
  File "<pyshell#58>", line 1, in <listcomp>
    [x.toString + y for x in numbers for y in letters ]
AttributeError: 'int' object has no attribute 'toString'
>>> [[x, y] for x in numbers for y in letters ]
[[1, 'A'], [1, 'B'], [1, 'C'], [2, 'A'], [2, 'B'], [2, 'C'], [3, 'A'], [3, 'B'], [3, 'C']]
>>> LofLists = [[1, 2, 3, 4], [10], [5, 5], [1, 1, 2, 8]]
>>> sum(LofLists)
Traceback (most recent call last):
  File "<pyshell#61>", line 1, in <module>
    sum(LofLists)
TypeError: unsupported operand type(s) for +: 'int' and 'list'
>>> sum([sum x for x in LofList])
SyntaxError: invalid syntax
>>> sum([sum(x) for x in LofList])
Traceback (most recent call last):
  File "<pyshell#63>", line 1, in <module>
    sum([sum(x) for x in LofList])
NameError: name 'LofList' is not defined
>>> sum([x for x in LofList])
Traceback (most recent call last):
  File "<pyshell#64>", line 1, in <module>
    sum([x for x in LofList])
NameError: name 'LofList' is not defined
>>> [x for x in LofList]
Traceback (most recent call last):
  File "<pyshell#65>", line 1, in <module>
    [x for x in LofList]
NameError: name 'LofList' is not defined
>>> sum([sum(x) for x in in x for x in LofList])
SyntaxError: invalid syntax
>>> sum([sum(x) for x in x for x in LofList])
Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    sum([sum(x) for x in x for x in LofList])
NameError: name 'x' is not defined
>>> sum([sum(x) for x in LofList])
Traceback (most recent call last):
  File "<pyshell#68>", line 1, in <module>
    sum([sum(x) for x in LofList])
NameError: name 'LofList' is not defined
>>> ([sum(x) for x in LofList])
Traceback (most recent call last):
  File "<pyshell#69>", line 1, in <module>
    ([sum(x) for x in LofList])
NameError: name 'LofList' is not defined
>>> sum([sum(x) for x in LofLists])
42
>>> LofLists = [[.25, .75, .1,], [-1, 0], [4, 4, 4, 4]]
>>> sum([sum(x) for x in LofLists])
16.1
>>> [x, y, z, w] = [1, 2, 3, 4]
>>> x
1
>>> y
2
>>> z
3
>>> [x, y, z, w,u] = [1, 2, 3, 4]
Traceback (most recent call last):
  File "<pyshell#77>", line 1, in <module>
    [x, y, z, w,u] = [1, 2, 3, 4]
ValueError: not enough values to unpack (expected 5, got 4)
>>> [x, y, z, w] = [1, 2, 3, 4], 5
Traceback (most recent call last):
  File "<pyshell#78>", line 1, in <module>
    [x, y, z, w] = [1, 2, 3, 4], 5
ValueError: not enough values to unpack (expected 4, got 2)
>>> S = {-4, -2, 1, 2, 5, 0}
>>> ((x, y, z) for x in S for y in S for z in S if x+y+z == 0)
<generator object <genexpr> at 0x101af4bf8>
>>> {(x, y, z) for x in S for y in S for z in S if x+y+z == 0}
{(1, 1, -2), (0, -2, 2), (0, 2, -2), (2, 2, -4), (2, 0, -2), (2, -4, 2), (-2, 0, 2), (-2, 1, 1), (2, -2, 0), (-4, 2, 2), (-2, 2, 0), (0, 0, 0), (1, -2, 1)}
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 if x!=y!=z!=0]
[(0, 2, -2), (0, -2, 2), (1, -2, 1), (2, 0, -2), (2, -4, 2), (-2, 0, 2)]
>>> {(x, y, z) for x in S for y in S for z in S if x+y+z == 0}
{(1, 1, -2), (0, -2, 2), (0, 2, -2), (2, 2, -4), (2, 0, -2), (2, -4, 2), (-2, 0, 2), (-2, 1, 1), (2, -2, 0), (-4, 2, 2), (-2, 2, 0), (0, 0, 0), (1, -2, 1)}
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 if x!=0 && y!=0 && z!=0]
SyntaxError: invalid syntax
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 if x!=0 & y!=0 & z!=0]
[]
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 if (x!=0 && y!=0 && z!=0)]
SyntaxError: invalid syntax
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 if (x!=0 & y!=0 & z!=0)]
[]
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 && (x!=0 && y!=0 && z!=0)]
SyntaxError: invalid syntax
>>>  [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 & (x!=0 && y!=0 && z!=0)]
 
SyntaxError: unexpected indent
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 & (x!=0 & y!=0 & z!=0)]
[(0, 0, 0), (0, 2, -2), (0, -2, 2), (1, 1, -2), (1, -2, 1), (2, 0, -2), (2, 2, -4), (2, -4, 2), (2, -2, 0), (-4, 2, 2), (-2, 0, 2), (-2, 1, 1), (-2, 2, 0)]
>>>  [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 && (x!=0 && y!=0 && z!=0)]
 
SyntaxError: unexpected indent
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 && (x!=0 && y!=0 && z!=0)]
SyntaxError: invalid syntax
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 & (x!=0 && y!=0 && z!=0)]
SyntaxError: invalid syntax
>>>  [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 && !(x==0 & y==0 & z==0)]
 
SyntaxError: unexpected indent
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 && !(x==0 & y==0 & z==0)]
SyntaxError: invalid syntax
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 & !(x==0 & y==0 & z==0)]
SyntaxError: invalid syntax
>>> [(x, y, z) for x in S for y in S for z in S if x+y+z == 0 & (x!=0 & y!=0 & z!=0)]
[(0, 0, 0), (0, 2, -2), (0, -2, 2), (1, 1, -2), (1, -2, 1), (2, 0, -2), (2, 2, -4), (2, -4, 2), (2, -2, 0), (-4, 2, 2), (-2, 0, 2), (-2, 1, 1), (-2, 2, 0)]
>>> list({1, 2, 3, 4, 4, 5})

[1, 2, 3, 4, 5]
>>> set{[1, 2, 3, 4, 5, 6, 7, 4]}
SyntaxError: invalid syntax
>>> set([1, 2, 3,4, 5, 6, 7, 10, 11, 10])
{1, 2, 3, 4, 5, 6, 7, 10, 11}
>>> list({x**2 for x in range(200)})
[0, 1, 1024, 4096, 4, 9216, 15876, 16384, 16900, 9, 16, 529, 3600, 4624, 15376, 17424, 23104, 35344, 38416, 25, 12321, 21025, 36, 14884, 17956, 2601, 49, 7225, 29241, 3136, 64, 576, 1089, 6724, 1600, 2116, 5184, 7744, 9801, 24649, 30276, 81, 8281, 27225, 6241, 31329, 100, 13924, 19044, 11881, 21609, 625, 121, 4225, 36481, 36864, 1156, 8836, 26244, 3721, 38025, 144, 1681, 2704, 5776, 10816, 13456, 19600, 32400, 4761, 34969, 2209, 676, 10404, 23716, 169, 3249, 39601, 28224, 11449, 22201, 9409, 25281, 196, 12996, 20164, 1225, 30976, 5329, 33489, 729, 225, 1764, 7396, 28900, 6889, 29929, 7921, 27889, 2809, 256, 2304, 6400, 12544, 3844, 4356, 14400, 16129, 16641, 15625, 17161, 36100, 37636, 784, 1296, 8464, 10000, 11025, 22801, 24336, 26896, 15129, 17689, 289, 25600, 3364, 4900, 34596, 39204, 5929, 32041, 14641, 18225, 1849, 9025, 25921, 324, 12100, 21316, 841, 14161, 18769, 1369, 2401, 33856, 2916, 5476, 33124, 361, 10609, 23409, 13689, 19321, 3969, 37249, 18496, 900, 9604, 24964, 4489, 20736, 35721, 400, 1936, 7056, 7569, 11664, 21904, 28561, 29584, 3481, 38809, 6561, 30625, 1444, 8100, 27556, 13225, 19881, 5041, 34225, 441, 961, 2500, 6084, 31684, 8649, 26569, 3025, 10201, 24025, 32761, 12769, 20449, 484, 11236, 22500, 2025, 1521, 5625]
>>> list([x**2 for x in range(200)])
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 10201, 10404, 10609, 10816, 11025, 11236, 11449, 11664, 11881, 12100, 12321, 12544, 12769, 12996, 13225, 13456, 13689, 13924, 14161, 14400, 14641, 14884, 15129, 15376, 15625, 15876, 16129, 16384, 16641, 16900, 17161, 17424, 17689, 17956, 18225, 18496, 18769, 19044, 19321, 19600, 19881, 20164, 20449, 20736, 21025, 21316, 21609, 21904, 22201, 22500, 22801, 23104, 23409, 23716, 24025, 24336, 24649, 24964, 25281, 25600, 25921, 26244, 26569, 26896, 27225, 27556, 27889, 28224, 28561, 28900, 29241, 29584, 29929, 30276, 30625, 30976, 31329, 31684, 32041, 32400, 32761, 33124, 33489, 33856, 34225, 34596, 34969, 35344, 35721, 36100, 36481, 36864, 37249, 37636, 38025, 38416, 38809, 39204, 39601]
>>> list([x in range(99) if x%2!=0])
SyntaxError: invalid syntax
>>> list[x in range(99) if(x%2!=0)]
SyntaxError: invalid syntax
>>> 
>>> [x in range(99) if(x%2!=0)]
SyntaxError: invalid syntax
>>> [x in range(99) if(x%2!=0)]
SyntaxError: invalid syntax
>>> x in range(99)
True
>>> [x for x in range(99) if(x%2!=0)]
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]
>>> [x for x in range(999) if(x%2!=0)]
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997]
>>> [x for x in range(10, 20)]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> [x for x in range(10, 20, 30)]
[10]
>>> [x for x in range(1, 100, 1000)]
[1]
>>> [x for x in range(1, 1000, 10)]
[1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231, 241, 251, 261, 271, 281, 291, 301, 311, 321, 331, 341, 351, 361, 371, 381, 391, 401, 411, 421, 431, 441, 451, 461, 471, 481, 491, 501, 511, 521, 531, 541, 551, 561, 571, 581, 591, 601, 611, 621, 631, 641, 651, 661, 671, 681, 691, 701, 711, 721, 731, 741, 751, 761, 771, 781, 791, 801, 811, 821, 831, 841, 851, 861, 871, 881, 891, 901, 911, 921, 931, 941, 951, 961, 971, 981, 991]
>>> [x for x in range(0, 10000, 10) if (x)]
[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1570, 1580, 1590, 1600, 1610, 1620, 1630, 1640, 1650, 1660, 1670, 1680, 1690, 1700, 1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780, 1790, 1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110, 2120, 2130, 2140, 2150, 2160, 2170, 2180, 2190, 2200, 2210, 2220, 2230, 2240, 2250, 2260, 2270, 2280, 2290, 2300, 2310, 2320, 2330, 2340, 2350, 2360, 2370, 2380, 2390, 2400, 2410, 2420, 2430, 2440, 2450, 2460, 2470, 2480, 2490, 2500, 2510, 2520, 2530, 2540, 2550, 2560, 2570, 2580, 2590, 2600, 2610, 2620, 2630, 2640, 2650, 2660, 2670, 2680, 2690, 2700, 2710, 2720, 2730, 2740, 2750, 2760, 2770, 2780, 2790, 2800, 2810, 2820, 2830, 2840, 2850, 2860, 2870, 2880, 2890, 2900, 2910, 2920, 2930, 2940, 2950, 2960, 2970, 2980, 2990, 3000, 3010, 3020, 3030, 3040, 3050, 3060, 3070, 3080, 3090, 3100, 3110, 3120, 3130, 3140, 3150, 3160, 3170, 3180, 3190, 3200, 3210, 3220, 3230, 3240, 3250, 3260, 3270, 3280, 3290, 3300, 3310, 3320, 3330, 3340, 3350, 3360, 3370, 3380, 3390, 3400, 3410, 3420, 3430, 3440, 3450, 3460, 3470, 3480, 3490, 3500, 3510, 3520, 3530, 3540, 3550, 3560, 3570, 3580, 3590, 3600, 3610, 3620, 3630, 3640, 3650, 3660, 3670, 3680, 3690, 3700, 3710, 3720, 3730, 3740, 3750, 3760, 3770, 3780, 3790, 3800, 3810, 3820, 3830, 3840, 3850, 3860, 3870, 3880, 3890, 3900, 3910, 3920, 3930, 3940, 3950, 3960, 3970, 3980, 3990, 4000, 4010, 4020, 4030, 4040, 4050, 4060, 4070, 4080, 4090, 4100, 4110, 4120, 4130, 4140, 4150, 4160, 4170, 4180, 4190, 4200, 4210, 4220, 4230, 4240, 4250, 4260, 4270, 4280, 4290, 4300, 4310, 4320, 4330, 4340, 4350, 4360, 4370, 4380, 4390, 4400, 4410, 4420, 4430, 4440, 4450, 4460, 4470, 4480, 4490, 4500, 4510, 4520, 4530, 4540, 4550, 4560, 4570, 4580, 4590, 4600, 4610, 4620, 4630, 4640, 4650, 4660, 4670, 4680, 4690, 4700, 4710, 4720, 4730, 4740, 4750, 4760, 4770, 4780, 4790, 4800, 4810, 4820, 4830, 4840, 4850, 4860, 4870, 4880, 4890, 4900, 4910, 4920, 4930, 4940, 4950, 4960, 4970, 4980, 4990, 5000, 5010, 5020, 5030, 5040, 5050, 5060, 5070, 5080, 5090, 5100, 5110, 5120, 5130, 5140, 5150, 5160, 5170, 5180, 5190, 5200, 5210, 5220, 5230, 5240, 5250, 5260, 5270, 5280, 5290, 5300, 5310, 5320, 5330, 5340, 5350, 5360, 5370, 5380, 5390, 5400, 5410, 5420, 5430, 5440, 5450, 5460, 5470, 5480, 5490, 5500, 5510, 5520, 5530, 5540, 5550, 5560, 5570, 5580, 5590, 5600, 5610, 5620, 5630, 5640, 5650, 5660, 5670, 5680, 5690, 5700, 5710, 5720, 5730, 5740, 5750, 5760, 5770, 5780, 5790, 5800, 5810, 5820, 5830, 5840, 5850, 5860, 5870, 5880, 5890, 5900, 5910, 5920, 5930, 5940, 5950, 5960, 5970, 5980, 5990, 6000, 6010, 6020, 6030, 6040, 6050, 6060, 6070, 6080, 6090, 6100, 6110, 6120, 6130, 6140, 6150, 6160, 6170, 6180, 6190, 6200, 6210, 6220, 6230, 6240, 6250, 6260, 6270, 6280, 6290, 6300, 6310, 6320, 6330, 6340, 6350, 6360, 6370, 6380, 6390, 6400, 6410, 6420, 6430, 6440, 6450, 6460, 6470, 6480, 6490, 6500, 6510, 6520, 6530, 6540, 6550, 6560, 6570, 6580, 6590, 6600, 6610, 6620, 6630, 6640, 6650, 6660, 6670, 6680, 6690, 6700, 6710, 6720, 6730, 6740, 6750, 6760, 6770, 6780, 6790, 6800, 6810, 6820, 6830, 6840, 6850, 6860, 6870, 6880, 6890, 6900, 6910, 6920, 6930, 6940, 6950, 6960, 6970, 6980, 6990, 7000, 7010, 7020, 7030, 7040, 7050, 7060, 7070, 7080, 7090, 7100, 7110, 7120, 7130, 7140, 7150, 7160, 7170, 7180, 7190, 7200, 7210, 7220, 7230, 7240, 7250, 7260, 7270, 7280, 7290, 7300, 7310, 7320, 7330, 7340, 7350, 7360, 7370, 7380, 7390, 7400, 7410, 7420, 7430, 7440, 7450, 7460, 7470, 7480, 7490, 7500, 7510, 7520, 7530, 7540, 7550, 7560, 7570, 7580, 7590, 7600, 7610, 7620, 7630, 7640, 7650, 7660, 7670, 7680, 7690, 7700, 7710, 7720, 7730, 7740, 7750, 7760, 7770, 7780, 7790, 7800, 7810, 7820, 7830, 7840, 7850, 7860, 7870, 7880, 7890, 7900, 7910, 7920, 7930, 7940, 7950, 7960, 7970, 7980, 7990, 8000, 8010, 8020, 8030, 8040, 8050, 8060, 8070, 8080, 8090, 8100, 8110, 8120, 8130, 8140, 8150, 8160, 8170, 8180, 8190, 8200, 8210, 8220, 8230, 8240, 8250, 8260, 8270, 8280, 8290, 8300, 8310, 8320, 8330, 8340, 8350, 8360, 8370, 8380, 8390, 8400, 8410, 8420, 8430, 8440, 8450, 8460, 8470, 8480, 8490, 8500, 8510, 8520, 8530, 8540, 8550, 8560, 8570, 8580, 8590, 8600, 8610, 8620, 8630, 8640, 8650, 8660, 8670, 8680, 8690, 8700, 8710, 8720, 8730, 8740, 8750, 8760, 8770, 8780, 8790, 8800, 8810, 8820, 8830, 8840, 8850, 8860, 8870, 8880, 8890, 8900, 8910, 8920, 8930, 8940, 8950, 8960, 8970, 8980, 8990, 9000, 9010, 9020, 9030, 9040, 9050, 9060, 9070, 9080, 9090, 9100, 9110, 9120, 9130, 9140, 9150, 9160, 9170, 9180, 9190, 9200, 9210, 9220, 9230, 9240, 9250, 9260, 9270, 9280, 9290, 9300, 9310, 9320, 9330, 9340, 9350, 9360, 9370, 9380, 9390, 9400, 9410, 9420, 9430, 9440, 9450, 9460, 9470, 9480, 9490, 9500, 9510, 9520, 9530, 9540, 9550, 9560, 9570, 9580, 9590, 9600, 9610, 9620, 9630, 9640, 9650, 9660, 9670, 9680, 9690, 9700, 9710, 9720, 9730, 9740, 9750, 9760, 9770, 9780, 9790, 9800, 9810, 9820, 9830, 9840, 9850, 9860, 9870, 9880, 9890, 9900, 9910, 9920, 9930, 9940, 9950, 9960, 9970, 9980, 9990]
>>> list(zip([1,2,3],[5,6,7]))
[(1, 5), (2, 6), (3, 7)]
>>> letters = ['a', 'b', 'c', 'd', 'e', 'f']
>>> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> zip(letters, numbers)
<zip object at 0x101d18a08>
>>> list(zip(letters, numbers))
[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]
>>> things = ["test", "stuff", "grej"]
>>> list(zip(letters, things, numbers))
[('a', 'test', 1), ('b', 'stuff', 2), ('c', 'grej', 3)]
>>> characters = ['neo', 'morpheus', 'trinity']
>>> actors = ['Keanu', 'Lawrence', 'Anne Carrie']
>>> set(zip(characters, actors))
{('morpheus', 'Lawrence'), ('neo', 'Keanu'), ('trinity', 'Anne Carrie')}
>>> {x + 'is played by' + y for x in characters for y in actors}
{'morpheusis played byLawrence', 'morpheusis played byKeanu', 'morpheusis played byAnne Carrie', 'trinityis played byAnne Carrie', 'neois played byLawrence', 'neois played byAnne Carrie', 'neois played byKeanu', 'trinityis played byLawrence', 'trinityis played byKeanu'}
>>> {x + ' is played by ' + y for(x, y) in zip(characters, actors) }
{'morpheus is played by Lawrence', 'trinity is played by Anne Carrie', 'neo is played by Keanu'}
>>> l = ['A', 'B', 'C', 'D', 'E']
>>> list(zip(l, range(10)))
[('A', 0), ('B', 1), ('C', 2), ('D', 3), ('E', 4)]
>>> list(zip(range(10), l))
[(0, 'A'), (1, 'B'), (2, 'C'), (3, 'D'), (4, 'E')]
>>> list1 = [10, 25, 40]
l
>>> i
>>> list2 = [1, 15, 20]
>>> {x+y for(x, y) in zip(list1, list2)}
{40, 11, 60}
>>> {x=y for(x, y) in zip(list2, list1)}
SyntaxError: invalid syntax
>>> {x+y for(x, y) in zip(list2, list1)}
{40, 11, 60}
>>> dlist=[{'James':'Sean','Director':'Terrance'}, {'James':'Roger', 'Director':'Lewis'}, {'James':'Piearce', 'Director':'Roger'}]
>>> k = 'James'
>>> list([x for list([x in dlist])])
SyntaxError: invalid syntax
>>> [x for x in dlist]
[{'James': 'Sean', 'Director': 'Terrance'}, {'James': 'Roger', 'Director': 'Lewis'}, {'James': 'Piearce', 'Director': 'Roger'}]
>>> [x[k] for x in dlist}
SyntaxError: invalid syntax
>>> [x[k] for x in dlist]]
SyntaxError: invalid syntax
>>> c = [x for x in dlist]
>>> c
[{'James': 'Sean', 'Director': 'Terrance'}, {'James': 'Roger', 'Director': 'Lewis'}, {'James': 'Piearce', 'Director': 'Roger'}]
>>> [x[k] for x in [x fpr x in dlist]]
SyntaxError: invalid syntax
>>> [x[k] for x in [x for x in dlist]]
['Sean', 'Roger', 'Piearce']
>>> dlist = [{'Bilbo':'Ian', 'Frodo':'Elija'}, {'Bilbo':'Somebody', 'Thorin':'Somebody else'}]
>>> k = 'Bilbo'
>>> [x[k] for x in [x for x in dlist] if k in [x for x in dlist]]
[]
>>> [x[k] for x in [x for x in dlist]]
['Ian', 'Somebody']
>>> k = 'Frodo'
>>> [x[k] for x in [x for x in dlist]]
Traceback (most recent call last):
  File "<pyshell#151>", line 1, in <module>
    [x[k] for x in [x for x in dlist]]
  File "<pyshell#151>", line 1, in <listcomp>
    [x[k] for x in [x for x in dlist]]
KeyError: 'Frodo'
>>> v[x[k] for x in [x for x in dlist] if k in
  
SyntaxError: invalid syntax
>>> [x[k] for x in [x for x in dlist] if k in x]
['Elija']
>>> 
